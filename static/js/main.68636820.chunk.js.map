{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","features/Login/Login.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","features/PageNotFound/PageNotFound.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","loginParams","handleServerAppError","data","dispatch","messages","length","changeAppErrorAC","changeAppStatusAC","initialState","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","status","res","resultCode","action","type","updateTaskAC","catch","error","message","console","warn","isLoggedIn","setIsLoggedInAC","value","isInitialized","changeTodolistEntityStatusAC","entityStatus","clearTodoListsData","fetchTodolistsTC","todolists","todoLists","forEach","tl","setTasksAC","items","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","todolist","removeTodolist","map","style","paddingTop","Button","TodolistsList","useSelector","state","auth","useDispatch","useEffect","thunk","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","navigate","useNavigate","Grid","container","padding","spacing","allTodolistTasks","Paper","Login","formik","useFormik","initialValues","email","password","rememberMe","captcha","onSubmit","values","resetForm","validationSchema","Yup","required","min","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","getFieldProps","touched","errors","height","FormControlLabel","control","handleChange","name","Alert","ref","elevation","ErrorSnackBar","app","handleClose","event","reason","isOpen","Stack","sx","width","Snackbar","open","autoHideDuration","onClose","severity","PageNotFound","to","App","loadingStatus","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Box","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","todoListId","copyState","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68636820.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create(\r\n    {\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a1254a8c-0530-4921-8e26-69272bb1af33'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', { title });\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, { title });\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, { title });\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    login(loginParams: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>(\"/auth/login\", loginParams)\r\n    },\r\n    me() {\r\n        return instance.get<MeResponseType>(\"/auth/me\")\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(\"/auth/login\")\r\n    }\r\n}\r\n\r\n\r\n\r\n// types\r\n\r\n//authAPI types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: boolean\r\n}\r\n\r\n\r\n\r\nexport type MeResponseType = {\r\n    resultCode: number\r\n    messages: string[]\r\n    fieldsErrors: string[]\r\n    data: {\r\n        id: number\r\n        email: string\r\n        login: string\r\n    }\r\n\r\n}\r\n\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { changeAppErrorAC, changeAppStatusAC, AppActionsType} from '../app/app-reducer';\r\nimport { Dispatch } from 'redux';\r\nimport { ResponseType } from '../api/todolists-api';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n   if (data.messages.length) {\r\n       dispatch(changeAppErrorAC(data.messages[0]))\r\n   } else {\r\n       dispatch(changeAppErrorAC('Some error occurred'))\r\n   }\r\n   dispatch(changeAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n   dispatch(changeAppErrorAC(error.message))\r\n   dispatch(changeAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<AppActionsType>","import { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType } from './todolists-reducer'\r\nimport { TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { changeAppErrorAC, changeAppStatusAC, AppActionsType, RequestStatusType } from '../../app/app-reducer'\r\nimport {handleServerAppError} from \"../../utils/error-utils\"\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TasksActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return { ...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId) }\r\n        case 'ADD-TASK':\r\n            return { ...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]] }\r\n        // case 'ADD-TASK':\r\n        //     return { ...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]] }\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? { ...t, ...action.model } : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return { ...state, [action.todolist.id]: [] }\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = { ...state }\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = { ...state }\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return { ...state, [action.todolistId]: action.tasks  }\r\n            // return { ...state, [action.todolistId]: action.tasks }\r\n            case \"CLEAR-TASKS-DATA\":\r\n                return {}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({ type: 'REMOVE-TASK', taskId, todolistId } as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({ type: 'ADD-TASK', task } as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({ type: 'UPDATE-TASK', model, todolistId, taskId } as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({ type: 'SET-TASKS', tasks, todolistId } as const)\r\nexport const clearTasksData = () => (\r\n    {type: \"CLEAR-TASKS-DATA\"} as const\r\n)\r\n\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<TasksActionsType | AppActionsType>) => {\r\n    dispatch(changeAppStatusAC(\"loading\"))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            const action = setTasksAC(tasks, todolistId)\r\n            dispatch(action)\r\n            dispatch(changeAppStatusAC(\"succeeded\"))\r\n        })\r\n        .catch((error) => {\r\n            dispatch(changeAppErrorAC(error.message))\r\n            dispatch(changeAppStatusAC(\"failed\"))\r\n    })\r\n        \r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<TasksActionsType | AppActionsType>) => {\r\n\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const action = removeTaskAC(taskId, todolistId)\r\n                dispatch(action)\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            dispatch(changeAppErrorAC(error.message))\r\n            dispatch(changeAppStatusAC(\"failed\"))\r\n    })\r\n}\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<TasksActionsType | AppActionsType>) => {\r\n    dispatch(changeAppStatusAC(\"loading\"))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(changeAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            dispatch(changeAppErrorAC(error.message))\r\n            dispatch(changeAppStatusAC(\"failed\"))\r\n    })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<TasksActionsType | AppActionsType>, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        dispatch(changeAppStatusAC(\"loading\"))\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                    dispatch(changeAppStatusAC(\"succeeded\"))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                dispatch(changeAppErrorAC(error.message))\r\n                dispatch(changeAppStatusAC(\"failed\"))\r\n        })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type TasksActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof clearTasksData>\r\n","import {Dispatch} from 'redux'\r\nimport {changeAppErrorAC, changeAppStatusAC, AppActionsType} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\"\r\nimport {handleServerAppError} from \"../../utils/error-utils\"\r\nimport {clearTasksData, TasksActionsType} from \"../TodolistsList/tasks-reducer\";\r\nimport {clearTodoListsData, TodoListsActionsType} from \"../TodolistsList/todolists-reducer\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (loginParams: LoginParamsType) => (dispatch: Dispatch<AuthActionsType>) => {\r\n    dispatch(changeAppStatusAC('loading'))\r\n    authAPI.login(loginParams)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                dispatch(changeAppErrorAC(\"Some error\"))\r\n            }\r\n            dispatch(changeAppStatusAC('failed'))\r\n        })\r\n        .catch((error) => {\r\n            dispatch(changeAppErrorAC(error.message))\r\n            dispatch(changeAppStatusAC(\"failed\"))\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<AuthActionsType | TodoListsActionsType | TasksActionsType>) => {\r\n    dispatch(changeAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(changeAppStatusAC('succeeded'))\r\n                dispatch(clearTasksData())\r\n                dispatch(clearTodoListsData())\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            dispatch(changeAppErrorAC(error.message))\r\n            dispatch(changeAppStatusAC(\"failed\"))\r\n        })\r\n}\r\n\r\n\r\n// types\r\nexport type AuthActionsType = ReturnType<typeof setIsLoggedInAC> | AppActionsType","import { authAPI } from \"../api/todolists-api\"\r\nimport { setIsLoggedInAC } from \"../features/Login/auth-reducer\"\r\nimport { Dispatch } from 'redux'\r\nimport { handleServerAppError } from \"../utils/error-utils\"\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n  status: \"idle\",\r\n  error: null,\r\n  isInitialized: false,\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n   switch (action.type) {\r\n       case 'APP/SET-STATUS':\r\n       return { ...state, status: action.status }\r\n     case 'APP/SET-ERROR':\r\n       return {...state, error: action.error}\r\n     case 'APP/SET-INITIALIZED':\r\n       return {...state, isInitialized: action.isInitialized}\r\n       default:\r\n           return state\r\n   }\r\n}\r\n\r\n\r\nexport const changeAppStatusAC = (status: RequestStatusType) => {\r\n  return {type: 'APP/SET-STATUS', status} as const\r\n}\r\nexport const changeAppErrorAC = (error: string | null) => {\r\n  return {type: 'APP/SET-ERROR', error} as const\r\n}\r\nexport const setIsInitializedAC  = (isInitialized: boolean) => {\r\n  return {type: 'APP/SET-INITIALIZED', isInitialized} as const\r\n}\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n  dispatch(changeAppStatusAC(\"loading\"))\r\n  authAPI.me().then(res => {\r\n    dispatch(setIsInitializedAC(true))\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC(true))\r\n        dispatch(changeAppStatusAC(\"succeeded\"))\r\n      } else {\r\n        handleServerAppError(res.data, dispatch)\r\n      }\r\n  })\r\n    .catch((error) => {\r\n      dispatch(changeAppErrorAC(error.message))\r\n      dispatch(changeAppStatusAC(\"failed\"))\r\n  })\r\n}\r\n\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n  status: RequestStatusType\r\n  error: string | null\r\n  isInitialized: boolean\r\n}\r\n  \r\n\r\n\r\nexport type AppActionsType = ErrorActionType | StatusActionType | setIsInitializedType\r\ntype ErrorActionType = ReturnType<typeof changeAppErrorAC>\r\ntype StatusActionType = ReturnType<typeof changeAppStatusAC>\r\ntype setIsInitializedType = ReturnType<typeof setIsInitializedAC>\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {changeAppErrorAC, changeAppStatusAC, AppActionsType, RequestStatusType} from '../../app/app-reducer'\r\nimport {handleServerAppError} from \"../../utils/error-utils\"\r\nimport {fetchTasksTC} from \"./tasks-reducer\";\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport {AllActionsType, AppRootStateType} from \"../../app/store\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: TodoListsActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: \"idle\"}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: \"idle\"}))\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        case \"CLEAR-TODOLISTS-DATA\":\r\n            return []\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\nexport const changeTodolistEntityStatusAC = (todolistId: string, entityStatus: RequestStatusType) => (\r\n    {type: \"CHANGE-TODOLIST-ENTITY-STATUS\", todolistId, entityStatus} as const\r\n)\r\nexport const clearTodoListsData = () => (\r\n    {type: \"CLEAR-TODOLISTS-DATA\"} as const\r\n)\r\n\r\n\r\n// thunks\r\n\r\nexport const fetchTodolistsTC = (): ThunkAction<void, AppRootStateType, unknown, AllActionsType> => {\r\n    return (dispatch) => {\r\n        dispatch(changeAppStatusAC(\"loading\"))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(changeAppStatusAC(\"succeeded\"))\r\n                return res.data\r\n            })\r\n            .then((todoLists) => {\r\n                todoLists.forEach(tl => {\r\n                    dispatch(fetchTasksTC(tl.id))\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                dispatch(changeAppErrorAC(error.message))\r\n                dispatch(changeAppStatusAC(\"failed\"))\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<TodoListsActionsType | AppActionsType>) => {\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, \"loading\"))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTodolistAC(todolistId))\r\n                    dispatch(changeTodolistEntityStatusAC(todolistId, \"succeeded\"))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                dispatch(changeAppErrorAC(error.message))\r\n                dispatch(changeAppStatusAC(\"failed\"))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch<TodoListsActionsType | AppActionsType>) => {\r\n        dispatch(changeAppStatusAC(\"loading\"))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                    dispatch(changeAppStatusAC(\"succeeded\"))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                dispatch(changeAppErrorAC(error.message))\r\n                dispatch(changeAppStatusAC(\"failed\"))\r\n            })\r\n    }\r\n}\r\n\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<TodoListsActionsType | AppActionsType>) => {\r\n        dispatch(changeTodolistEntityStatusAC(id, \"loading\"))  ///////////changeTodolistEntityStatusAC???\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTodolistTitleAC(id, title))\r\n                    dispatch(changeTodolistEntityStatusAC(id, \"succeeded\"))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                dispatch(changeAppErrorAC(error.message))\r\n                dispatch(changeTodolistEntityStatusAC(id, \"failed\"))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type ChangeTodolistEntityStatusActionType = ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type ClearTodoListsDataActionType = ReturnType<typeof clearTodoListsData>\r\n\r\n\r\nexport type TodoListsActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ChangeTodolistEntityStatusActionType\r\n    | ClearTodoListsDataActionType\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled=false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n            helperText={error} \r\n            disabled={disabled}\r\n        />\r\n        <IconButton disabled={disabled} color=\"primary\" onClick={addItemHandler}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ?\r\n            <TextField disabled={props.disabled} value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n            :\r\n            <span onDoubleClick={activateEditMode}>{props.value}</span>)\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\nimport { TaskStatuses, TaskType } from '../../../../api/todolists-api'\r\n\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\n\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { RequestStatusType } from \"../../../app/app-reducer\"\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n    todolist: TodolistDomainType\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n\r\n\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan disabled={props.todolist.entityStatus === \"loading\"} value={props.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === \"loading\"}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === \"loading\"} />\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                    removeTask={props.removeTask}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{ paddingTop: '10px' }}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                onClick={onAllClickHandler}\r\n                color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                onClick={onActiveClickHandler}\r\n                color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                onClick={onCompletedClickHandler}\r\n                color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport { useNavigate } from \"react-router-dom\"\r\n\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [isLoggedIn])\r\n\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, { status }, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, { title: newTitle }, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const navigate = useNavigate()\r\n    if (!isLoggedIn) navigate(\"login\")\r\n\r\n    return <>\r\n        <Grid container style={{ padding: '20px' }}>\r\n            <AddItemForm addItem={addTodolist} />\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{ padding: '10px' }}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                filter={tl.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                entityStatus={tl.entityStatus}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { loginTC } from \"./auth-reducer\"\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { useNavigate } from \"react-router-dom\"\r\n\r\n\r\n\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false,\r\n            captcha: true,\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n        validationSchema: Yup.object({\r\n            email: Yup.string().email(\"Invalid email address\").required(\"Required email\"),\r\n            password: Yup.string().min(4).required(\"Password required\"),\r\n        })\r\n    })\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType>(state => state.auth.isLoggedIn)\r\n    const navigate = useNavigate()\r\n    if (isLoggedIn) navigate(\"/\")\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={(e) => formik.handleSubmit(e)}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'} target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: esh8284@gmail.com</p>\r\n                        <p>Password: hellO28415again</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n\r\n\r\n                        <TextField\r\n                            type=\"email\"\r\n                            label=\"Email\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n\r\n                        {formik.touched.email && formik.errors.email ? <div style={{ color: \"red\", height: \"30px\" }}>{formik.errors.email}</div> : <div style={{ height: \"30px\" }}></div>}\r\n\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n\r\n                        {formik.touched.password && formik.errors.password ? <div style={{ color: \"red\", height: \"30px\" }}>{formik.errors.password}</div> : <div style={{ height: \"30px\" }}></div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                onChange={formik.handleChange}\r\n                                checked={formik.values.rememberMe}\r\n                                name=\"rememberMe\"\r\n                            />}\r\n                        />\r\n                        <Button\r\n                            type={'submit'}\r\n                            variant={'contained'}\r\n                            color={'primary'}\r\n                        >\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import * as React from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport {changeAppErrorAC} from \"../../app/app-reducer\"\r\n\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n  props,\r\n  ref,\r\n) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport const ErrorSnackBar = () => {\r\n  // const [open, setOpen] = React.useState(true);\r\n\r\n  // const handleClick = () => {\r\n  //   setOpen(true);\r\n  // };\r\n  const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n  const dispatch = useDispatch()\r\n\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    dispatch(changeAppErrorAC(null))\r\n    // setOpen(false);\r\n  };\r\n\r\n  \r\nconst isOpen = error !== null\r\n  return (\r\n    <Stack spacing={2} sx={{ width: '100%' }}>\r\n      <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"error\" sx={{ width: '100%' }}>\r\n          {error}\r\n        </Alert>\r\n      </Snackbar>\r\n\r\n    </Stack>\r\n  );\r\n}","import {\r\n  Routes,\r\n  Route,\r\n  Link,\r\n  Outlet\r\n} from \"react-router-dom\";\r\n\r\nexport const PageNotFound = () => {\r\n  return (\r\n    <div>\r\n      <h1>404: PAGE NOT FOUND</h1>\r\n      <nav>\r\n        <Link to=\"/\">Back to todolists</Link>\r\n      </nav>\r\n    </div>\r\n  )\r\n}","import React, { useEffect } from 'react'\r\nimport './App.css'\r\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\r\nimport { Login } from \"../features/Login/Login\"\r\n\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport { Menu } from '@mui/icons-material';\r\nimport Box from '@mui/material/Box';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport { ErrorSnackBar } from \"../components/ErrorSnackBar/ErrorSnackBar\"\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from './store';\r\nimport { RequestStatusType, initializeAppTC } from \"./app-reducer\"\r\nimport { Routes, Route } from \"react-router-dom\"\r\nimport { PageNotFound } from \"../features/PageNotFound/PageNotFound\"\r\nimport { CircularProgress } from '@mui/material';\r\nimport { logoutTC } from \"../features/Login/auth-reducer\"\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n    const loadingStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{ position: 'fixed', top: '30%', textAlign: 'center', width: '100%' }}>\r\n            <CircularProgress />\r\n        </div>\r\n    }\r\n\r\n    const logoutFunc = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    const loginPath = \"login\"\r\n    const todolistPath = \"/\"\r\n    const notFoundPath = \"*\"\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn ? <Button onClick={logoutFunc} color=\"inherit\">Logout</Button> : <Button color=\"inherit\">Login</Button>}\r\n                </Toolbar>\r\n                {\r\n                    loadingStatus === 'loading' &&\r\n                    <Box sx={{ width: \"100%\" }}>\r\n                        <LinearProgress />\r\n                    </Box>\r\n                }\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={loginPath} element={<Login />} />\r\n                    <Route path={todolistPath} element={<TodolistsList />} />\r\n                    <Route path={notFoundPath} element={<PageNotFound />} />\r\n                </Routes>\r\n            </Container>\r\n            <ErrorSnackBar />\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {TasksActionsType, tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {TodoListsActionsType, todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {AppActionsType, appReducer} from \"../app/app-reducer\"\r\nimport {AuthActionsType, authReducer} from \"../features/Login/auth-reducer\"\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n// store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AllActionsType = TodoListsActionsType | TasksActionsType | AppActionsType | AuthActionsType\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './app/App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './app/store';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n                <App />\r\n            </HashRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}